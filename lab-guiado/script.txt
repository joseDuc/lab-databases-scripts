-- crea el esquema
DROP DATABASE  IF EXISTS   lab1  ;

CREATE DATABASE IF NOT EXISTS lab1;
USE lab1;
-- crea tabla
CREATE TABLE lab1.Peliculas (
    id_pelicula INT auto_increment,
    titulo VARCHAR(255),
    director VARCHAR(255),
    año_estreno INT,
    genero VARCHAR(255),
    actor_principal VARCHAR(255),
    actor_secundario VARCHAR(255),
    pais_origen VARCHAR(255),
    PRIMARY KEY(id_pelicula)
);
CREATE TABLE Coches (
    id_coche INT auto_increment,
    marca VARCHAR(255),
    modelo VARCHAR(255),
    año INT,
    propietario_nombre VARCHAR(255),
    propietario_direccion VARCHAR(255),
    propietario_telefono VARCHAR(255),
    taller_nombre VARCHAR(255),
    taller_direccion VARCHAR(255),
     PRIMARY KEY(id_coche)
);
CREATE TABLE EquiposFutbol (
    id_equipo INT auto_increment,
    nombre_equipo VARCHAR(255),
    estadio VARCHAR(255),
    entrenador VARCHAR(255),
    ciudad VARCHAR(255),
    jugador1 VARCHAR(255),
    jugador2 VARCHAR(255),
    jugador3 VARCHAR(255),
     PRIMARY KEY(id_equipo)
);
CREATE TABLE Canciones (
    id_cancion INT auto_increment,
    titulo VARCHAR(255),
    artista VARCHAR(255),
    album VARCHAR(255),
    año_lanzamiento INT,
    genero VARCHAR(255),
    duracion TIME,
    compositor VARCHAR(255),
    PRIMARY KEY(id_cancion)
);
CREATE TABLE Animales (
    id_animal INT auto_increment,
    nombre VARCHAR(255),
    especie VARCHAR(255),
    edad INT,
    propietario_nombre VARCHAR(255),
    propietario_direccion VARCHAR(255),
    veterinario_nombre VARCHAR(255),
    veterinario_direccion VARCHAR(255),
     PRIMARY KEY(id_animal)
);
-- fill data
INSERT INTO Peliculas (id_pelicula, titulo, director, año_estreno, genero, actor_principal, actor_secundario, pais_origen) VALUES
(1, 'The Shawshank Redemption', 'Frank Darabont', 1994, 'Drama', 'Tim Robbins', 'Morgan Freeman', 'USA'),
(2, 'The Godfather', 'Francis Ford Coppola', 1972, 'Crime', 'Marlon Brando', 'Al Pacino', 'USA'),
(3, 'The Dark Knight', 'Christopher Nolan', 2008, 'Action', 'Christian Bale', 'Heath Ledger', 'USA'),
(4, 'Forrest Gump', 'Robert Zemeckis', 1994, 'Drama', 'Tom Hanks', 'Robin Wright', 'USA'),
(5, 'Pulp Fiction', 'Quentin Tarantino', 1994, 'Crime', 'John Travolta', 'Samuel L. Jackson', 'USA'),
(6, 'Inception', 'Christopher Nolan', 2010, 'Sci-Fi', 'Leonardo DiCaprio', 'Joseph Gordon-Levitt', 'USA'),
(7, 'Titanic', 'James Cameron', 1997, 'Romance', 'Leonardo DiCaprio', 'Kate Winslet', 'USA'),
(8, 'The Matrix', 'The Wachowskis', 1999, 'Sci-Fi', 'Keanu Reeves', 'Laurence Fishburne', 'USA'),
(9, 'Avatar', 'James Cameron', 2009, 'Sci-Fi', 'Sam Worthington', 'Zoe Saldana', 'USA'),
(10, 'Gladiator', 'Ridley Scott', 2000, 'Action', 'Russell Crowe', 'Joaquin Phoenix', 'USA');

INSERT INTO Coches (id_coche, marca, modelo, año, propietario_nombre, propietario_direccion, propietario_telefono, taller_nombre, taller_direccion) VALUES
(1, 'Toyota', 'Corolla', 2018, 'Juan Pérez', 'Calle Principal 123', '123-456-7890', 'Taller Juan', 'Avenida Central 456'),
(2, 'Honda', 'Civic', 2017, 'María López', 'Avenida Libertad 456', '987-654-3210', 'Taller Martínez', 'Calle Independencia 789'),
(3, 'Ford', 'Mustang', 2020, 'Pedro García', 'Calle Sur 789', '456-789-0123', 'Taller Rodríguez', 'Avenida Norte 123'),
(4, 'Chevrolet', 'Camaro', 2019, 'Ana Martínez', 'Calle Este 567', '321-654-0987', 'Taller Sánchez', 'Avenida Oeste 567'),
(5, 'Nissan', 'Altima', 2016, 'Luisa Torres', 'Avenida Central 789', '789-012-3456', 'Taller Gómez', 'Calle Principal 234'),
(6, 'BMW', 'X5', 2021, 'Carlos Ruiz', 'Calle Norte 345', '210-987-6543', 'Taller López', 'Avenida Sur 890'),
(7, 'Mercedes-Benz', 'C-Class', 2019, 'Sofía Rodríguez', 'Avenida Oeste 890', '543-210-9876', 'Taller Martín', 'Calle Este 678'),
(8, 'Audi', 'A4', 2018, 'Javier Gómez', 'Calle Este 789', '012-345-6789', 'Taller Pérez', 'Avenida Norte 345'),
(9, 'Hyundai', 'Elantra', 2017, 'Laura Sánchez', 'Avenida Libertad 678', '876-543-2109', 'Taller Hernández', 'Calle Sur 456'),
(10, 'Kia', 'Optima', 2019, 'Diego Martín', 'Calle Principal 567', '234-567-8901', 'Taller Ruiz', 'Avenida Central 678');

INSERT INTO EquiposFutbol (id_equipo, nombre_equipo, estadio, entrenador, ciudad, jugador1, jugador2, jugador3) VALUES
(1, 'Real Madrid', 'Santiago Bernabéu', 'Carlo Ancelotti', 'Madrid', 'Karim Benzema', 'Luka Modric', 'Sergio Ramos'),
(2, 'FC Barcelona', 'Camp Nou', 'Ronald Koeman', 'Barcelona', 'Lionel Messi', 'Gerard Piqué', 'Sergio Busquets'),
(3, 'Liverpool FC', 'Anfield', 'Jürgen Klopp', 'Liverpool', 'Mohamed Salah', 'Virgil van Dijk', 'Sadio Mané'),
(4, 'Manchester City', 'Etihad Stadium', 'Pep Guardiola', 'Manchester', 'Kevin De Bruyne', 'Raheem Sterling', 'Phil Foden'),
(5, 'Juventus FC', 'Allianz Stadium', 'Massimiliano Allegri', 'Turín', 'Cristiano Ronaldo', 'Paulo Dybala', 'Giorgio Chiellini'),
(6, 'Bayern Munich', 'Allianz Arena', 'Julian Nagelsmann', 'Múnich', 'Robert Lewandowski', 'Thomas Müller', 'Manuel Neuer'),
(7, 'Paris Saint-Germain', 'Parc des Princes', 'Mauricio Pochettino', 'París', 'Kylian Mbappé', 'Neymar Jr.', 'Marco Verratti'),
(8, 'Chelsea FC', 'Stamford Bridge', 'Thomas Tuchel', 'Londres', "N'Golo Kanté", 'Mason Mount', 'Christian Pulisic'),
(9, 'Atlético de Madrid', 'Wanda Metropolitano', 'Diego Simeone', 'Madrid', 'Luis Suárez', 'João Félix', 'Jan Oblak'),
(10, 'AC Milan', 'San Siro', 'Stefano Pioli', 'Milán', 'Zlatan Ibrahimović', 'Gianluigi Donnarumma', 'Franck Kessié');

INSERT INTO Animales (id_animal, nombre, especie, edad, propietario_nombre, propietario_direccion, veterinario_nombre, veterinario_direccion) VALUES
(1, 'Max', 'Perro', 5, 'Ana Martínez', 'Calle Principal 123', 'Dr. Pérez', 'Avenida Central 456'),
(2, 'Whiskers', 'Gato', 3, 'Luisa Rodríguez', 'Calle Libertad 456', 'Dr. Gómez', 'Avenida Sur 789'),
(3, 'Buddy', 'Perro', 7, 'Carlos Sánchez', 'Avenida Norte 789', 'Dra. López', 'Calle Este 123'),
(4, 'Oliver', 'Gato', 2, 'Laura Pérez', 'Calle Oeste 567', 'Dr. Martínez', 'Avenida Central 890'),
(5, 'Luna', 'Perro', 4, 'Diego Gómez', 'Calle Principal 234', 'Dra. Rodríguez', 'Avenida Libertad 678'),
(6, 'Simba', 'Gato', 1, 'María López', 'Avenida Sur 890', 'Dr. Hernández', 'Calle Norte 345'),
(7, 'Charlie', 'Perro', 6, 'Javier Ruiz', 'Calle Este 678', 'Dra. Sánchez', 'Avenida Oeste 456'),
(8, 'Milo', 'Gato', 5, 'Sofía Martín', 'Avenida Norte 345', 'Dr. Pérez', 'Calle Principal 567'),
(9, 'Bella', 'Perro', 3, 'Pablo Hernández', 'Calle Oeste 678', 'Dra. Gómez', 'Avenida Central 789'),
(10, 'Oreo', 'Gato', 2, 'Lucía Rodríguez', 'Calle Libertad 890', 'Dr. Martínez', 'Avenida Sur 456');

INSERT INTO Canciones (id_cancion, titulo, artista, album, año_lanzamiento, genero, duracion, compositor) VALUES
(1, 'Bohemian Rhapsody', 'Queen', 'A Night at the Opera', 1975, 'Rock', '00:05:55', 'Freddie Mercury'),
(2, 'Shape of You', 'Ed Sheeran', '÷', 2017, 'Pop', '00:03:53', 'Ed Sheeran'),
(3, 'Rolling in the Deep', 'Adele', '21', 2010, 'Pop', '00:03:48', 'Adele Adkins'),
(4, 'Despacito', 'Luis Fonsi', 'Vida', 2017, 'Pop', '00:03:48', 'Luis Fonsi, Daddy Yankee'),
(5, 'Billie Jean', 'Michael Jackson', 'Thriller', 1982, 'Pop', '00:04:54', 'Michael Jackson'),
(6, 'Hotel California', 'Eagles', 'Hotel California', 1976, 'Rock', '00:06:30', 'Don Felder, Glenn Frey, Don Henley'),
(7, 'Stairway to Heaven', 'Led Zeppelin', 'Led Zeppelin IV', 1971, 'Rock', '00:08:02', 'Jimmy Page, Robert Plant'),
(8, 'Thinking Out Loud', 'Ed Sheeran', '×', 2014, 'Pop', '00:04:41', 'Ed Sheeran, Amy Wadge'),
(9, 'Shape of You', 'Ed Sheeran', '÷ (Divide)', 2017, 'Pop', '00:03:54', 'Ed Sheeran'),
(10, 'Thriller', 'Michael Jackson', 'Thriller', 1982, 'Pop', '00:05:57', 'Rod Temperton');

-- musica normalizacion

-- separo artistas
create table artistas (
id_artista int AUTO_INCREMENT,
nombre varchar(100),
 PRIMARY key(id_artista)
);
-- actualizo datos artistas
insert into artistas (nombre) select distinct artista from Canciones;
-- creo nueva columna de sustitución  id_artista en canciones
ALTER TABLE canciones ADD id_artista INT;
ALTER TABLE canciones ADD CONSTRAINT fk_id_artista FOREIGN KEY (id_artista) REFERENCES artistas(id_artista);
update canciones, artistas set canciones.id_artista = artistas.id_artista where canciones.artista =artistas.nombre ;

-- separo albums
CREATE TABLE   canciones_album (
id_album INT  auto_increment,
id_artista int,
nombre varchar(100),
PRIMARY key(id_album)
);
-- actualizo datos albums (falta el nombre del album)
-- insert into canciones_album (id_artista) select artistas.id_Artista from artistas inner join canciones on artistas.nombre=canciones.artista;
insert into canciones_album (id_artista,nombre) select distinct id_artista,album from canciones;
ALTER TABLE canciones ADD id_album INT;
ALTER TABLE canciones ADD CONSTRAINT fk_id_album FOREIGN KEY (id_album) REFERENCES canciones_album(id_album);
update canciones, canciones_album set canciones.id_album = canciones_album.id_album where canciones.album =canciones_album.nombre ;

-- separo compositores
create table compositores (
id_compositor int auto_increment,
nombre varchar(400),
 primary key(id_compositor)
);
-- actualizao datos compositores
insert compositores (nombre) select distinct canciones.compositor from canciones ;
-- creo columnas de sustitución id_compositor em canciones
alter table canciones add id_compositor int;
ALTER TABLE canciones ADD CONSTRAINT fk_id_compositor FOREIGN KEY (id_compositor) REFERENCES compositores(id_compositor);
update canciones, compositores set canciones.id_compositor = compositores.id_compositor where  compositores.nombre =canciones.compositor ;

-- cine normalizacion

-- separo directores
create table directores (
id_director int auto_increment,
nombre varchar(100),
primary key (id_director)
);
-- actualizao datos directores
insert directores (nombre) select distinct peliculas.director from peliculas;
-- creo columnas de sustitución id_director em peliculas
alter table peliculas add id_director int;
ALTER TABLE peliculas ADD CONSTRAINT fk_id_director FOREIGN KEY (id_director) REFERENCES directores(id_director);
update peliculas, directores set peliculas.id_director= directores.id_director where peliculas.director = directores.nombre ;

-- separo genero
create table generos (
id_genero int auto_increment,
nombre varchar(150),
primary key (id_genero)
);
-- actualizao datos genero
insert generos (nombre) select distinct genero from peliculas;
-- creo columnas de sustitución id_genero em peliculas
alter table peliculas add id_genero int;
ALTER TABLE peliculas ADD CONSTRAINT fk_id_genero FOREIGN KEY (id_genero) REFERENCES generos(id_genero);
update peliculas,generos set peliculas.id_genero=generos.id_genero where peliculas.genero =generos.nombre ;

-- separo protagonistas y secundarios
create table actores (
id_actor INT auto_increment,
nombre varchar(100),
primary key (id_actor)
);
-- temp para procesar valores unicos
create table actores_tmp (
id_actor INT auto_increment,
nombre varchar(100),
primary key (id_actor)
);
insert actores_tmp (nombre) select distinct actor_principal from peliculas union select distinct actor_Secundario from peliculas;
insert actores (nombre) select distinct nombre from actores_tmp;
-- creo columnas de sustitución id_protagonista em peliculas
alter table peliculas add id_protagonista int,add id_secundario int;
ALTER TABLE peliculas ADD CONSTRAINT fk_id_protagonista FOREIGN KEY (id_protagonista) REFERENCES actores(id_actor);
ALTER TABLE peliculas ADD CONSTRAINT fk_id_secundario FOREIGN KEY (id_secundario) REFERENCES actores(id_actor);
update peliculas, actores set peliculas.id_protagonista = actores.id_actor where peliculas.actor_principal =actores.nombre; 
update peliculas, actores set peliculas.id_secundario = actores.id_actor where peliculas.actor_secundario =actores.nombre; 

-- coche normalizacion
create table taller (
id_taller INT auto_increment,
nombre varchar(100),
direccion varchar(255),
primary key (id_taller)
);

create table coche_propietario (
id_propietario int auto_increment,
nombre varchar(100),
direccion varchar(255),
telefono varchar(50),
primary key (id_propietario)
);

-- futbol normalizacion
-- separo jugadores
create table futbol_jugadores (
id_jugador int auto_increment,
nombre varchar(100),
primary key (id_jugador)
);
-- tabla temp para acumular a los jugadores sin repeticiones
create table futbol_jugadores_tmp (
id_jugador int auto_increment,
nombre varchar(100),
primary key (id_jugador)
);
-- actualiza la tabla futbol_jugadores
insert into futbol_jugadores_tmp (nombre) select distinct jugador1 from equiposfutbol union select distinct jugador2 from equiposfutbol union select distinct jugador3 from equiposfutbol;
insert into futbol_jugadores (nombre) select distinct nombre from futbol_jugadores_tmp ;
-- no crea columna de sustitución porque al ser many to many ha de haber tabla intermedia
-- creo tabla intermedia de equipoFutbol_jugador
create table equipoFutbol_jugador (
id_equipo int ,
id_jugador int,
primary key (id_equipo,id_jugador)
);
-- actualizo tabla equipoFutbol_jugador
insert into equipoFutbol_jugador (id_equipo,id_jugador) select equiposFutbol.id_equipo,futbol_jugadores.id_jugador from equiposfutbol,futbol_jugadores where equiposfutbol.jugador1=futbol_jugadores.nombre;
insert into equipoFutbol_jugador (id_equipo,id_jugador) select equiposFutbol.id_equipo,futbol_jugadores.id_jugador from equiposfutbol,futbol_jugadores where equiposfutbol.jugador2=futbol_jugadores.nombre;
insert into equipoFutbol_jugador (id_equipo,id_jugador) select equiposFutbol.id_equipo,futbol_jugadores.id_jugador from equiposfutbol,futbol_jugadores where equiposfutbol.jugador3=futbol_jugadores.nombre;

-- separo estadio
create table futbol_estadios (
id_estadio int auto_increment,
nombre varchar(100),
primary key (id_estadio)
);
-- actualizo futbol_estadios
insert into futbol_estadios (nombre) select distinct estadio from equiposFutbol;
-- creo columna de sustitución id_estadio 
alter table equiposfutbol add id_estadio int ;
ALTER TABLE equiposfutbol ADD CONSTRAINT fk_id_estadio FOREIGN KEY (id_estadio) REFERENCES futbol_estadios(id_estadio);
update equiposfutbol, futbol_estadios set equiposfutbol.id_estadio=futbol_estadios.id_estadio where equiposfutbol.estadio =futbol_estadios.nombre ;

-- separo ciudad
create table ciudades (
id_ciudad int auto_increment,
nombre varchar(50),
primary key (id_ciudad)
);
-- actualizo ciudades
insert into ciudades  (nombre) select distinct ciudad from equiposfutbol;
-- creo columna de sustitución id_ciudad 
alter table equiposfutbol add id_ciudad int ;
ALTER TABLE equiposfutbol ADD CONSTRAINT fk_id_ciudad FOREIGN KEY (id_ciudad) REFERENCES ciudades(id_ciudad);
update equiposfutbol,ciudades set equiposfutbol.id_ciudad =ciudades.id_ciudad where equiposfutbol.ciudad =ciudades.nombre ;

-- separo entrenadores
create table futbol_entrenadores (
id_entrenador int auto_increment,
nombre varchar(100),
primary key (id_entrenador)
);
-- actualizo futbol_entrenadores
insert into futbol_entrenadores (nombre) select distinct entrenador from equiposfutbol ;
alter table equiposfutbol add id_entrenador int ;
ALTER TABLE equiposfutbol ADD CONSTRAINT fk_id_entrenador FOREIGN KEY (id_entrenador) REFERENCES futbol_entrenadores(id_entrenador);
update equiposfutbol,futbol_entrenadores set equiposfutbol.id_entrenador =futbol_entrenadores.id_entrenador where equiposfutbol.entrenador =futbol_entrenadores.nombre ;

-- animales normalizacion

-- separo especie
create table animal_especies (
id_especie int auto_increment,
nombre varchar(100),
primary key (id_especie)
);
-- actualizo animal_especie
insert into animal_especies (nombre) select distinct especie from animales ;
alter table animales add id_especie int;
alter table animales add constraint fk_id_especie foreign key (id_especie) references animal_especies(id_especie);
update animales, animal_especies set animales.id_especie = animal_especies.id_especie where animales.especie =animal_especies.nombre ;

-- separo propietarios
create table animal_propietarios (
id_propietario int auto_increment,
nombre varchar (255),
direccion varchar(255),
primary key (id_propietario)
);
-- actualizo animal.propietarios
insert into animal_propietarios  (nombre, direccion) select distinct propietario_nombre, propietario_direccion from animales; 
alter table animales add id_propietario int;
alter table animales add constraint fk_id_propietario foreign key (id_propietario) references animal_propietarios(id_propietario); 
update animales,animal_propietarios set animales.id_propietario=animal_propietarios.id_propietario where animales.propietario_nombre =animal_propietarios.nombre and animales.propietario_direccion =animal_propietarios.direccion ;
-- separo veterinarios
create table animal_veterinarios (
id_veterinario int auto_increment,
nombre varchar (50),
direccion varchar(255),
primary key (id_veterinario)
);
-- actualizo animal_veterinarios
insert into animal_veterinarios  (nombre, direccion) select distinct veterinario_nombre, veterinario_direccion from animales; 
alter table animales add id_veterinario int;
alter table animales add constraint fk_id_veterinario foreign key (id_veterinario) references animal_veterinarios(id_veterinario); 
update animales,animal_veterinarios set animales.id_veterinario=animal_veterinarios.id_veterinario where animales.veterinario_nombre =animal_veterinarios.nombre and animales.veterinario_direccion =animal_veterinarios.direccion ;


-- elimina tablas temp
drop table  actores_tmp;
drop table futbol_jugadores_tmp;